/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 ./public/models/dice/dice-draco.gltf
Author: Seth Gardner (https://sketchfab.com/sethgardner)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/free-dice-model-d6-low-poly-4k-0603a7c54a6146a1b83df9a8cdb4b911
Title: Free Dice Model (D6) Low Poly 4K
*/

import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import {
  CollisionEnterPayload,
  quat,
  RapierRigidBody,
  RigidBody,
  vec3,
} from '@react-three/rapier'
import { useControls } from 'leva'
import { myPlayer, useMultiplayerState } from 'playroomkit'
import { FC, ForwardedRef, forwardRef, ReactNode, useState } from 'react'
import * as THREE from 'three'
import { schema } from '../../debug.schema'
import { ERemoteState } from '../../enums'
import { IDice, IModel } from './Dice.types'

export const Dice = ({ children }: IDice) => children

const Controls = forwardRef(
  (
    { soundOn, children }: { soundOn: boolean; children: ReactNode },
    ref: ForwardedRef<RapierRigidBody>,
  ) => {
    const { rotationIntFactor, positionIntFactor } = useControls(schema)

    const me = myPlayer()
    const [position, setPosition] = useMultiplayerState(
      ERemoteState.dicePosition,
      new THREE.Vector3(0, 0, 0),
    )
    const [rotation, setRotation] = useMultiplayerState(
      ERemoteState.diceRotation,
      new THREE.Quaternion(0, 0, 0, 0),
    )
    const [currentPlayerId, setCurrentPlayerId] = useMultiplayerState(
      ERemoteState.currentPlayer,
      null,
    )

    const [hitSound] = useState(() => new Audio('/audio/hit.mp3'))

    const [diceHeldSinceMs, setDiceHeldSinceMs] = useState<number>(0)

    const handleDiceToss = () => {
      if (typeof ref === 'function' || !ref?.current) return

      const diceWasHeldMicroSec = (Date.now() - diceHeldSinceMs) / 100

      const impulse = { x: 0, y: 10, z: 0 }
      const torqueImpulse = {
        x: Math.random() - 0.5 * diceWasHeldMicroSec,
        y: Math.random() - 0.5 * diceWasHeldMicroSec,
        z: Math.random() - 0.5 * diceWasHeldMicroSec,
      }

      setCurrentPlayerId(me.id)

      ref.current.applyImpulse(impulse, true)
      ref.current.applyTorqueImpulse(torqueImpulse, true)
    }

    const handleDicePick = () => {
      setDiceHeldSinceMs(Date.now())
    }

    const handleCollisionSound = (e: CollisionEnterPayload) => {
      if (e.other?.colliderObject?.name !== 'floor' || !soundOn) return

      hitSound.currentTime = 0
      hitSound.volume = Math.random()
      hitSound.play()
    }

    useFrame(() => {
      if (typeof ref === 'function' || !ref?.current || !currentPlayerId) return

      if (currentPlayerId === me.id) {
        setPosition(ref.current.translation())
        setRotation(ref.current.rotation())
      } else {
        if (!position || !rotation) return

        const newPos = vec3(ref.current.translation()).lerp(
          position,
          positionIntFactor,
        )
        const newRot = quat(ref.current.rotation()).slerp(
          quat(rotation),
          rotationIntFactor,
        )

        ref.current.setTranslation(newPos, true)
        ref.current.setRotation(newRot, true)
      }
    })

    return (
      <RigidBody
        ref={ref}
        position={[0, 3, 0]}
        onCollisionEnter={handleCollisionSound}
      >
        <group onPointerDown={handleDicePick} onPointerUp={handleDiceToss}>
          {children}
        </group>
      </RigidBody>
    )
  },
)

const Model: FC<IModel> = (props) => {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const { nodes, materials }: { nodes: any; materials: any } = useGLTF(
    '/models/dice/dice-draco.gltf',
  )

  return (
    <group scale={0.01} dispose={null} {...props}>
      <mesh
        geometry={nodes.redo_uv_Material001_0.geometry}
        material={materials['Material.001']}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={50}
        castShadow
      />
    </group>
  )
}

Controls.displayName = 'Controls'
Model.displayName = 'Model'

Dice.Model = Model
Dice.Controls = Controls

useGLTF.preload('/models/dice/dice-draco.gltf')
